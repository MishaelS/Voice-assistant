import speech_recognition
import subprocess, platform, os
import random

# ----------------------------------------------------------------------------------------

sr = speech_recognition.Recognizer()
sr.pause_threshold = 0.5

commands_dict = {
	'commands': {
		'greeting'   : ['–ø—Ä–∏–≤–µ—Ç', '–ø—Ä–∏–≤–µ—Ç–∏–∫', '–ø—Ä–∏–≤–µ—Ç –±–æ—Ç', '–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é', '–±–æ—Ç'],
		'create_task': ['–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', '—Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É', '–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å', '—Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å', '–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É', '—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É', '–∑–∞–º–µ—Ç–∫–∞'],
		'play_music' : ['–≤–∫–ª—é—á–∏ –º—É–∑—ã–∫—É', '–º—É–∑—ã–∫–∞', '–¥–∏—Å–∫–æ—Ç–µ–∫–∞', '–≤–∫–ª—é—á–∏ –º—É–∑–æ–Ω'],
	}
}

# ----------------------------------------------------------------------------------------

def listen_command():
	'''The function will return the recorgnized command'''
	
	try:
		with speech_recognition.Microphone() as mic:
			sr.adjust_for_ambient_noise(source=mic, duration=0.5)
			audio = sr.listen(source=mic)
			query = sr.recognize_google(audio_data=audio, language='ru-RU').lower()
		return query
	except speech_recognition.UnknownValueError:
		return 'Damn... –Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é! :|'

# ----------------------------------------------------------------------------------------

def greeting():
	'''Greeting function'''
	
	return '–ü—Ä–∏–≤–µ—Ç –∫–æ–∂–∞–Ω—ã–π –º–µ—à–æ–∫!'

# ----------------------------------------------------------------------------------------

def create_task():
	'''Create a todo task'''
	
	print('–ß—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ –¥–µ–ª?')
	
	query = listen_command()
	
	with open('todo-list.txt', 'a') as file:
		file.write(' - {0}\n'.format(query))
		
	return '–ó–∞–¥–∞—á–∞ {0} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ todo-list!'.format(query)

# ----------------------------------------------------------------------------------------

def play_music():
	'''Play a random mp3 file'''
	
	files = os.listdir('music')
	random_file = 'music/{0}'.format(random.choice(files))
	# os.system('xdg.open {0}'.format(random_file))
	
	if platform.system() == 'Linux':
		subprocess.call(('xdg-open', random_file))
	elif platform.system() == 'Windows':
		os.startfile(random_file)

	return '–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è "{0}" üîä'.format(random_file.split("/")[-1])

# ----------------------------------------------------------------------------------------

def main():
	query = listen_command()

	for k, v in commands_dict['commands'].items():
		if query in v:
			print(globals()[k]())

# ----------------------------------------------------------------------------------------

if __name__ == '__main__':
	main()
	
